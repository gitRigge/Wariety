#!/usr/bin/env python
# -*- coding: UTF-8 -*-

# Wariety - A wallpaper manager for MS Windows operating system.
# Copyright (C) 2024  Roland Rickborn <wariety@gmx.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see https://www.gnu.org/licenses/.

#
# generated by wxGlade 0.9.4 on Thu Nov  7 14:19:18 2019
#

# begin wxGlade: dependencies
import gettext
import locale
import logging
import sys

import wx
import wx.adv

# end wxGlade
# begin wxGlade: extracode
# end wxGlade


logger = logging.getLogger(__name__)

current_locale = locale.getdefaultlocale()[0].split("_")[0]
if getattr(sys, 'frozen', False):
    import wariety.wariety as wariety
    lang = gettext.translation('aboutDlg', localedir=sys._MEIPASS+'/locale', languages=[current_locale])
else:
    import wariety
    lang = gettext.translation('aboutDlg', localedir='locale', languages=[current_locale])
lang.install()
_ = lang.gettext


class AboutDlg(wx.Frame):
    def __init__(self, *args, **kwds):
        logger.debug('__init__()')
        # begin wxGlade: AboutDlg.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CAPTION | wx.CLIP_CHILDREN | wx.CLOSE_BOX | wx.FRAME_FLOAT_ON_PARENT | wx.FRAME_NO_TASKBAR
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((550, 500))
        self.label_1 = wx.StaticText(self, wx.ID_ANY, 'name')
        self.label_2 = wx.StaticText(self, wx.ID_ANY, 'version')
        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, 'desc', style=wx.BORDER_NONE | wx.TE_BESTWRAP | wx.TE_MULTILINE | wx.TE_NO_VSCROLL | wx.TE_READONLY | wx.TE_WORDWRAP)
        self.hyperlink_1 = wx.adv.HyperlinkCtrl(self, wx.ID_ANY, 'url', "")
        self.label_3 = wx.StaticText(self, wx.ID_ANY, 'copyright')
        self.text_ctrl_2 = wx.TextCtrl(self, wx.ID_ANY, 'license', style=wx.TE_BESTWRAP | wx.TE_CHARWRAP | wx.TE_MULTILINE | wx.TE_WORDWRAP)
        self.button_1 = wx.Button(self, wx.ID_ANY, _("Close"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.onButtonClose, self.button_1)
        # end wxGlade
        title = kwds.get('title', 'About Wariety')
        name = kwds.get('name', 'Wariety')
        self.set_properties_received_by_main(title, name)
        self.Centre()

    def set_properties_received_by_main(self, title, name):
        logger.debug('set_properties_received_by_main()')
        args = wariety.get_aboutDlg_args()
        version = args['version']
        desc = args['desc']
        url = args['url']
        copyright = args['copyright']
        license = args['license']
        self.label_1.SetLabel(name)
        self.label_2.SetLabel(_("Version")+' {}'.format(version))
        self.text_ctrl_1.SetValue(desc)
        self.hyperlink_1.SetLabel(url)
        self.label_3.SetLabel(copyright)
        self.text_ctrl_2.SetValue(license)
        self.SetTitle(title)

    def __set_properties(self):
        logger.debug('__set_properties()')
        # begin wxGlade: AboutDlg.__set_properties
        self.SetTitle(_("About Wariety"))
        _icon = wx.NullIcon
        self.SetIcon(_icon)
        self.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DFACE))
        self.label_1.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        self.text_ctrl_1.SetMinSize((500, 40))
        self.text_ctrl_1.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DFACE))
        self.text_ctrl_2.SetMinSize((500, 90))
        self.text_ctrl_2.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_1.SetToolTip(_("Hit button to close window"))
        self.button_1.SetFocus()
        # end wxGlade
        if getattr(sys, 'frozen', False):
            icon = wx.Icon()
            icon.CopyFromBitmap(wx.Bitmap(sys._MEIPASS+'/data/icons/logo_1_32x32px.ico', wx.BITMAP_TYPE_ANY))
            self.SetIcon(icon)
        else:
            icon = wx.Icon()
            icon.CopyFromBitmap(wx.Bitmap('data/icons/logo_1_32x32px.ico', wx.BITMAP_TYPE_ANY))
            self.SetIcon(icon)

    def __do_layout(self):
        logger.debug('__do_layout()')
        # begin wxGlade: AboutDlg.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        bitmap_1 = wx.StaticBitmap(self, wx.ID_ANY, wx.NullBitmap)
        bitmap_1.SetMinSize((150, 132))
        sizer_1.Add(bitmap_1, 0, wx.ALIGN_CENTER | wx.ALL, 9)
        sizer_1.Add(self.label_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_1.Add(self.label_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_1.Add(self.text_ctrl_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_1.Add(self.hyperlink_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_1.Add(self.label_3, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_1.Add(self.text_ctrl_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_1.Add(self.button_1, 0, wx.ALIGN_RIGHT | wx.ALL, 10)
        self.SetSizer(sizer_1)
        self.Layout()
        self.Centre()
        # end wxGlade
        if getattr(sys, 'frozen', False):
            icon = wx.Icon()
            icon.CopyFromBitmap(wx.Bitmap(sys._MEIPASS+'/data/icons/logo_1_150x132px.png', wx.BITMAP_TYPE_ANY))
            bitmap_1.SetIcon(icon)
        else:
            icon = wx.Icon()
            icon.CopyFromBitmap(wx.Bitmap('data/icons/logo_1_150x132px.png', wx.BITMAP_TYPE_ANY))
            bitmap_1.SetIcon(icon)

    def onButtonClose(self, event):  # wxGlade: AboutDlg.<event_handler>
        logger.debug('onButtonClose()')
        self.Destroy()

# end of class AboutDlg


class MyApp(wx.App):
    def OnInit(self):
        logger.debug('OnInit()')
        self.frame = AboutDlg(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp


if __name__ == "__main__":
    logger.debug('Starting frame')
    app = MyApp(0)
    app.MainLoop()
    logger.debug('Stopping frame')
